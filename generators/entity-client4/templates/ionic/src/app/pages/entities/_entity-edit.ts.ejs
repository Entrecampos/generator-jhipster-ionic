<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const query = generateEntityQueries(relationships, entityInstance, dto);
const queries = query.queries;
const variables = query.variables;
let hasManyToMany = query.hasManyToMany;
_%>

import { Component, OnInit } from '@angular/core';
<%_ if (fieldsContainImageBlob) { _%>
import { Camera, CameraOptions } from '@ionic-native/camera/ngx';
<%_ } _%>
import { ToastController } from '@ionic/angular';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { <%= entityAngularName %> } from './<%= entityFileName %>.model';

<%_
let hasRelationshipQuery = false;
Object.keys(differentRelationships).forEach(key => {
    const hasAnyRelationshipQuery = differentRelationships[key].some(rel =>
        (rel.relationshipType === 'one-to-one' && rel.ownerSide === true && rel.otherEntityName !== 'user')
        || rel.relationshipType !== 'one-to-many'
    );
    if (hasAnyRelationshipQuery) {
        hasRelationshipQuery = true;
    }
    if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
        const uniqueRel = differentRelationships[key][0];
        if (uniqueRel.otherEntityAngularName === 'User') { _%>
import { User } from '../user/user.model';
    <%_ } else if (uniqueRel.otherEntityAngularName !== entityAngularName) { _%>
import { <%= uniqueRel.otherEntityAngularName %> } from '../<%= uniqueRel.otherEntityModulePath %>';
    <%_}
    }
}); _%>
import { TENANT, EMPLOYEE, DOMAIN } from './../../../services/login.service';
import { EntityService } from '../entity.service';
import { <%_ Object.keys(differentRelationships).forEach(key => {
        if (differentRelationships[key].some(rel => rel.relationshipType !== 'one-to-many')) {
            const uniqueRel = differentRelationships[key][0];
            if (uniqueRel.otherEntityAngularName !== entityAngularName) { _%> <%= uniqueRel.otherEntityName %>Url, <%_
            }
        }
    });
_%> <%= entityInstance %>Url } from './../entity.service';
import { NmsEmployee } from '../nms-employee';

import { browserRefresh } from '../../../app.component';

@Component({
    selector: 'page-<%= entityFileName %>-edit',
    templateUrl: '<%= entityFileName %>-edit.html',
    styleUrls: ['../entities-edit.page.scss']
})
export class <%= entityAngularName %>EditPage implements OnInit {

    dom: NmsDomain;
    ten: NmsTenant;
    emp: NmsEmployee;

    <%= entityInstance %>: <%= entityAngularName %>;
    <%_ for (const idx in variables) { _%>
    <%- variables[idx] %>
    <%_ } _%>

    isSaving = false;
    isNew = true;
    isReadyToSave: boolean;

    form: FormGroup;
<%_ if (fieldsContainBlob) { _%>
    cam = Camera.installed;
    cameraOptions: CameraOptions;
<%_ } _%>

    constructor(
        protected activatedRoute: ActivatedRoute,
        protected formBuilder: FormBuilder,
        protected toastCtrl: ToastController,
        <%_ if (fieldsContainImageBlob) { _%>
        public camera: Camera,
        <%_ } _%>
        private entityService: EntityService
    ) {

        <%_ if (fieldsContainImageBlob) { _%>
        // Set the Camera options
        this.cameraOptions = {
            quality: 100,
            targetWidth: 900,
            targetHeight: 600,
            destinationType: this.camera.DestinationType.DATA_URL,
            encodingType: this.camera.EncodingType.JPEG,
            mediaType: this.camera.MediaType.PICTURE,
            sourceType: this.camera.PictureSourceType.PHOTOLIBRARY,
            saveToPhotoAlbum: false,
            allowEdit: true
        };
        <%_ } _%>
    }

    ngOnInit() {
        if (browserRefresh) {
            window.history.back();
            return;
        }

        EMPLOYEE.subscribe(empl => {
            if (empl !== null) {
                this.emp = empl;
                TENANT.subscribe(tena => {
                    if (tena !== null) {
                        this.ten = tena;
                        DOMAIN.subscribe(domain => {
                            if (domain !== null) {
                                this.dom = domain;
                        <%_ for (idx in queries) {
                            if (queries[idx].indexOf('userService') > -1) { _%>
                                this.userService.findAll().subscribe(data => this.users = data, (error) => this.onError(error));
                            <%_ } else { _%>
                                <%- queries[idx] %>
                        <%_ } } _%>
                                this.activatedRoute.data.subscribe((response) => {
                                    this.initForm(response.data);
                                    this.<%= entityInstance %> = response.data;
                                    this.isNew = this.<%= entityInstance %>.id === null || this.<%= entityInstance %>.id === undefined;
                                });
                            }
                        });
                });
            }
        });
    }

    async initForm(<%= entityInstance %>: <%= entityAngularName %>) {
        this.form = await this.formBuilder.group({
            id: [<%= entityInstance %>.id],
        <%_ for ( idx in fields ) {
            const fieldName = fields[idx].fieldName;
            const fieldType = fields[idx].fieldType;
        _%>
        <%_ if (fieldName === 'lastModifiedDate') { _%>
            <%= fieldName %>: [new Date().toISOString()],
        <%_ } else if (fieldName === 'lastModifiedBy') { _%>
            lastModifiedBy: this.emp.user.firstName + ' ' + this.emp.user.lastName,
        <%_ } else if (fieldName === 'active') { _%>
            active: [(this.isNew) ? true : <%= entityInstance %>.active],
        <%_ } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <%= fieldName %>: [(this.isNew) ? new Date().toISOString() : <%= entityInstance %>.<%= fieldName %>],
        <%_ } else { _%>
            <%= fieldName %>: [<%= entityInstance %>.<%= fieldName %>],
        <%_ } _%>
        <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fields[idx].fieldTypeBlobContent !== 'text') { _%>
            <%= fieldName %>ContentType: [<%= entityInstance %>.<%= fieldName %>ContentType],
          <%_ } _%>
        <%_ } _%>
<%_ for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const ownerSide = relationships[idx].ownerSide;
    const relationshipName = relationships[idx].relationshipName;
    const relationshipFieldName = relationships[idx].relationshipFieldName;
    const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural; _%>
    <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
        <%_ if (dto === 'no') { _%>
             <%_ if (relationshipName === 'domain') { _%>
            <%= relationshipName %>: [<%= entityInstance %>.domain != null ? <%= entityInstance %>.domain : this.dom],
             <%_ } else if (relationshipName === 'tenant') { _%>
            <%= relationshipName %>: [<%= entityInstance %>.tenant != null ? <%= entityInstance %>.tenant : this.ten],
            <%_ } else { _%>   
            <%=relationshipName %>: [<%= entityInstance %>.<%=relationshipFieldName %>],
        <%_ }} else { _%>
            <%=relationshipName %>Id: [<%= entityInstance %>.<%=relationshipFieldName %>Id],
        <%_ } _%>
    <%_ } else if (relationshipType === 'many-to-many' ) { _%>
            <%=relationshipFieldNamePlural %>: [<%=entityInstance %>.<%=relationshipFieldNamePlural %>],
    <%_ } _%>
<%_ } _%>
        });

        // Watch the form for changes, and
        this.form.valueChanges.subscribe((v) => {
            this.isReadyToSave = this.form.valid;
        });
    }

    save() {
        this.isSaving = true;
        const <%= entityInstance %> = this.createFromForm();
        if (!this.isNew) {
            this.subscribeToSaveResponse(this.entityService.update(<%= entityInstance %>Url, <%= entityInstance %>));
        } else {
            this.subscribeToSaveResponse(this.entityService.create(<%= entityInstance %>Url, <%= entityInstance %>));
        }
    }

    protected subscribeToSaveResponse(result: Observable<HttpResponse<<%= entityAngularName %>>>) {
        result.subscribe((res: HttpResponse<<%= entityAngularName %>>) => this.onSaveSuccess(res), (res: HttpErrorResponse) => this.onError(res.error));
    }

    async onSaveSuccess(response) {
        let action = 'updated';
        if (response.status === 201) {
          action = 'created';
        }
        this.isSaving = false;
        this.presentToast(`<%= entityAngularName %> ${action} successfully.`);
        window.history.back();
    }

    previousState() {
        window.history.back();
    }

    async onError(error) {
        this.isSaving = false;
        console.error(error);
        this.presentToast('Failed to load data');
    }

    private createFromForm(): <%= entityAngularName %> {
        return {
            ...new <%= entityAngularName %>(),
            id: this.<%= entityInstance %>.id,
        <%_ for ( idx in fields ) {
            const fieldName = fields[idx].fieldName;
            const fieldType = fields[idx].fieldType;
        _%>
        <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <%= fieldName %>: new Date(this.form.get(['<%= fieldName %>']).value),
          <%_ } else { _%>
            <%= fieldName %>: this.form.get(['<%= fieldName %>']).value,
          <%_ } _%>
          <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fields[idx].fieldTypeBlobContent !== 'text') { _%>
            <%= fieldName %>ContentType: this.form.get(['<%= fieldName %>ContentType']).value,
          <%_ } _%>
        <%_ } _%>
<%_ for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const ownerSide = relationships[idx].ownerSide;
    const relationshipName = relationships[idx].relationshipName;
    const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural; _%>
    <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
     <%_ if (dto === 'no') { _%>
       <%_ if (relationshipName === 'domain') { _%>
            <%= relationshipName %>: this.dom,
          <%_ } else if (relationshipName === 'tenant') { _%>
            <%= relationshipName %>: this.ten,
          <%_ } else { _%>   
            <%= relationshipName %>: this.form.get(['<%= relationshipName %>']).value,
          <%_ } _%> 
        <%_ } else { _%>
        <%= relationshipName %>Id: this.form.get(['<%= relationshipName %>Id']).value,
     <%_ } _%>
    <%_ } else if (relationshipType === 'many-to-many' ) { _%>
            <%= relationshipFieldNamePlural %>: this.form.get(['<%= relationshipFieldNamePlural %>']).value,
        <%_ } _%>
<%_ } _%>
        };
    }

<%_ if (fieldsContainImageBlob) { _%>
    getPicture(fieldName) {
        this.camera.getPicture(this.cameraOptions).then((data) => {
            this.<%= entityInstance %>[fieldName] = data;
            this.<%= entityInstance %>[fieldName + 'ContentType'] = 'image/jpeg';
            this.form.patchValue({ [fieldName]: data });
            this.form.patchValue({ [fieldName + 'ContentType']: 'image/jpeg' });
        }, (err) => { this.presentToast('Unable to take photo'); });
    }

    clearInputImage(field: string) {
            this.form.patchValue({ [field]: null });
            this.<%= entityInstance %>[field] = null;
    }

    public uploadFile(files: FileList, fieldName) {
        if (files && files.length > 0) {
            const file: File = files.item(0); // assuming only one file is uploaded
            console.log('Uploaded file, Filename:' + file.name + 'Filesize:' + file.size + 'Filetype:' + file.type);
            if (file.size > 1000000) {
                this.presentToast('Please upload a file smaller than 1M');
                return;
            }
            const reader: FileReader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = (e) => {
                const fileContent: string = reader.result as string;
                this.<%= entityInstance %>[fieldName] = fileContent.split(',')[1];
                this.<%= entityInstance %>[fieldName + 'ContentType'] = file.type;
                this.form.patchValue({ [fieldName]: this.<%= entityInstance %>[fieldName] });
                this.form.patchValue({ [fieldName + 'ContentType']: this.<%= entityInstance %>[fieldName + 'ContentType'] });
            };
        }
    }
<%_ } _%>

    async presentToast(text) {
        const toast = await this.toastCtrl.create({ message: text, duration: 2500, position: 'middle' });
        toast.present();
    }
}
