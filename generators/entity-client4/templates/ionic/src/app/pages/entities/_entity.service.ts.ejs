<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ApiService } from 'src/app/services/api/api.service';
import { createRequestOption } from 'src/app/shared';
import { <%= entityAngularName %> } from './<%= entityFileName %>.model';

@Injectable({ providedIn: 'root'})
export class <%= entityAngularName %>Service {
    private resourceUrl = ApiService.API_URL<% if (locals.microserviceName) { %>.replace('api', 'services/<%= microserviceName.toLowerCase() %>/api')<% } %> + '/<%= entityApiUrl %>';

    constructor(protected http: HttpClient) { }
    <%_ if (entityAngularName.length <= 30) { _%>

    create(<%= entityInstance %>: <%= entityAngularName %>): Observable<HttpResponse<<%= entityAngularName %>>> {
    <%_ } else { _%>

    create(<%= entityInstance %>: <%= entityAngularName %>):
        Observable<HttpResponse<<%= entityAngularName %>>> {
    <%_ } _%>
        return this.http.post<<%= entityAngularName %>>(this.resourceUrl, <%= entityInstance %>, { observe: 'response'});
    }
    <%_ if (entityAngularName.length <= 30) { _%>

    update(<%= entityInstance %>: <%= entityAngularName %>): Observable<HttpResponse<<%= entityAngularName %>>> {
    <%_ } else { _%>

    update(<%= entityInstance %>: <%= entityAngularName %>):
        Observable<HttpResponse<<%= entityAngularName %>>> {
    <%_ } _%>
        return this.http.put(this.resourceUrl, <%= entityInstance %>, { observe: 'response'});
    }

    find(id: <% if (pkType === 'String') { %>string<% } else { %>number<% } %>): Observable<HttpResponse<<%= entityAngularName %>>> {
        return this.http.get(`${this.resourceUrl}/${id}`, { observe: 'response'});
    }

    query(req?: any): Observable<HttpResponse<<%= entityAngularName %>[]>> {
        const options = createRequestOption(req);
        return this.http.get<<%= entityAngularName %>[]>(this.resourceUrl, { params: options, observe: 'response' });
    }

    delete(id: <% if (pkType === 'String') { %>string<% } else { %>number<% } %>): Observable<HttpResponse<any>> {
        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response'});
    }

<%_ if (fieldsContainActive) { _%>
    // == Custom ====
    queryByTenantId(tenantId: any, active: boolean = true): Observable<any> {
        console.log(`${this.resourceUrl}ByTenantId/${tenantId}/${active}`);
        return this.http.get(`${this.resourceUrl}ByTenantId/${tenantId}/${active}`);
    }

    queryByDomainId(domainId: any, active: boolean = true): Observable<any> {
        console.log(`${this.resourceUrl}ByDomainId/${domainId}/${active}`);
        return this.http.get(`${this.resourceUrl}ByDomainId/${domainId}/${active}`);
    }

    queryActive(active: boolean = true): Observable<any> {
        console.log(`${this.resourceUrl}Active/${active}`);
        return this.http.get(`${this.resourceUrl}Active/${active}`);
    }

    chgActive(id: number, active: boolean = true): Observable<any> {
        console.log(`${this.resourceUrl}ChgActive/${id}/${active}`);
        return this.http.put(`${this.resourceUrl}ChgActive/${id}/${active}`, null);
    }

// Don't forget to put in the backend <%= entityAngularName %>Resource.java file this:

// ======= Custom API's =======================
// /**
//  * GET  /<%= entityAngularName %>Active : get the <%= entityAngularName %> by active.
//  * @return the ResponseEntity with status 200 (OK) and the list of <%= entityAngularName %> in body
//  */
// @GetMapping("/<%= entityApiUrl %>}Active/{active}")
// public List<<%= entityAngularName %>> getActive( @PathVariable boolean active) {
//     log.debug("REST request to get <%= entityAngularName %> where Active = {} active:{} ",   active);
//         return <%= entityInstance %>Repository.getActive(active);
// }
//
// /**
//  * {@code PUT  /<%= entityApiUrl %>} : Updates active of <%= entityAngularName %> with zoneId.
//  *
//  * @param id the <%= entityAngularName %> to update.
//  * @param active: value to update
//  * @return true with status {@code 200 (OK)} if changed,
//  * or with status {@code 400 (Bad Request)} if the <%= entityAngularName %> is not valid,
//  * or with status {@code 500 (Internal Server Error)} if the <%= entityAngularName %>  couldn't be updated.
//  * @throws URISyntaxException if the Location URI syntax is incorrect.
//  */
// @PutMapping("/<%= entityApiUrl %>ChgActive/{id}/{active}")
// public Boolean updateActive<%= entityAngularName %> (@PathVariable Long id, @PathVariable Boolean active) 
//             throws URISyntaxException {
//     log.debug("REST request to chg <%= entityAngularName %> {} set Active{}  : {} {}", id, active);
//     return <%= entityInstance %>Repository.chgActive(id,active) == 1;
// }

// And in the <%= entityAngularName %>Repository.java file this: 

// import javax.transaction.Transactional;
// import org.springframework.data.jpa.repository.*;
// import org.springframework.data.repository.query.Param;
// import org.springframework.stereotype.Repository;

// @Transactional()
// @Modifying(clearAutomatically = true)
// @Query("update <%= entityAngularName %>  entity set entity.active=:active where entity.id = :id ")
// int chgActive(@Param("id") Long id, @Param("active") Boolean active);
//
// @Query("select entity from <%= entityAngularName %>  entity  where  entity.active =:active ")
// List<<%= entityAngularName %> > getActive( @Param("active") Boolean active);
<%_ } _%>
}
