<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const keyPrefix = entityTranslationKey + '.';
_%>
<app-header title="{{'<%= entityClassPlural %>' | translate }}"></app-header> 

<ion-content padding>
    <form *ngIf="form" name="form" [formGroup]="form" >
      <ion-grid fixed>
      <ion-row>
         <ion-col size="12" size-xs='12' size-sm='10' size-md='6' size-lg='6' size-xl='6'>
            <ion-item [hidden]="!form.id">
                <ion-label>ID</ion-label>
                <ion-input type="hidden" id="id" formControlName="id" readonly></ion-input>
            </ion-item>
            <%_ for (idx in fields) {
                const fieldName = fields[idx].fieldName;
                const fieldNameCapitalized = fields[idx].fieldNameCapitalized;
                const fieldNameHumanized = fields[idx].fieldNameHumanized;
                const fieldType = fields[idx].fieldType;
                const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
                let fieldInputType = 'text';
                let ngModelOption = '';
                const translationKey = keyPrefix + fieldName;
                if (fields[idx].fieldName !== 'lastModifiedBy' &&fields[idx].fieldName !== 'lastModifiedDate') {
                    
                }
                if (['Integer', 'Long', 'Float', 'Double', 'BigDecimal'].includes(fieldType)) {
                    fieldInputType = 'number';
                } else if (fieldType === 'LocalDate') {
                    fieldInputType = 'date';
                } else if (['Instant', 'ZonedDateTime'].includes(fieldType)) {
                    fieldInputType = 'datetime-local';
                } else if (fieldType === 'Boolean') {
                    fieldInputType = 'checkbox';
                } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') {
                    fieldInputType = 'hidden';
                }
            _%>

        <%_ if (fields[idx].fieldName !== 'lastModifiedBy' &&fields[idx].fieldName !== 'lastModifiedDate') {_%>
            <ion-item lines='none'>
                <%_ if (fields[idx].fieldIsEnum) { _%>
                <ion-label> {{ '<%=fieldNameCapitalized _%>' | translate }}:</ion-label>
                <ion-select formControlName="<%= fieldName %>" id="field_<%= fieldName %>" <% if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.indexOf('required') !== -1) { %> required<% } %>>
                <%_ const enumPrefix = fieldType;
                    const values = fields[idx].fieldValues.replace(/\s/g, '').split(',');
                    for (key in values) {
                        const value = values[key]; _%>
                        <ion-select-option value="<%= value %>"><% if (enableTranslation) { %>{{'<%=enumPrefix%>.<%=value%>' | translate}}<% } else { %><%=value%><% } %></ion-select-option>
                    <%_ } _%>
                </ion-select>
                <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
                <div>
                    <%_ if (fieldTypeBlobContent === 'image') { _%>
                    <img [src]="'data:' + <%=entityInstance %>.<%=fieldName%>ContentType + ';base64,' + <%=entityInstance %>.<%=fieldName%>" style="max-height: 100px;" *ngIf="<%= entityInstance %>?.<%= fieldName %>" alt="<%=entityInstance %> image"/>
                    <%_ } _%>
                    <div *ngIf="<%= entityInstance %>?.<%= fieldName %>">
                        <p>{{<%= entityInstance %>?.<%= fieldName %>ContentType}}, {{byteSize(<%= entityInstance %>?.<%= fieldName %>)}}</p>
                        <%_ if (fieldTypeBlobContent === 'image') { _%>
                        <ion-button color="danger" (click)="clearInputImage('<%= fieldName %>', '<%= fieldName %>ContentType', 'fileImage')">
                            <ion-icon name="trash" size='small' slot="icon-only"></ion-icon>
                        </ion-button>
                        <%_ } else { _%>
                        <ion-button color="danger" (click)="<%= entityInstance %>.<%= fieldName %>=null;<%= entityInstance %>.<%= fieldName %>ContentType=null;">
                            <ion-icon name="trash" size='small' slot="icon-only"></ion-icon>
                        </ion-button>
                        <%_ } _%>
                    </div>
                    <%_ if (fieldTypeBlobContent === 'image') { _%>
                    <input type="file" #fileInput style="display: none" (change)="setFileData($event, <%= entityInstance %>, '<%= fieldName %>', <% if (fieldTypeBlobContent === 'image') { %>true)" accept="image/*"<% } else { %>false)"<% } %>/>
                    
                    <ion-button *ngIf="!<%= entityInstance %>?.<%= fieldName %>" (click)="getPicture('<%= fieldName %>')">
                        <ion-icon name="add-circle" slot="start"></ion-icon>
                        {{ 'ADD_IMAGE' | translate }}
                    </ion-button>
                    <%_ } else{ _%>
                      <ion-label >{{ '<%=fieldNameCapitalized _%>' | translate }}:</ion-label>
                      <input type="file" #fileInput  (change)="setFileData($event, <%= entityInstance %>, '<%= fieldName %>', <% if (fieldTypeBlobContent === 'image') { %>true)" accept="image/*"<% } else { %>false)"<% } %>/>
                    <%_  } _%>
                </div>
                <%_ } else if (fieldType === 'LocalDate' || ['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                <ion-label>{{ '<%=fieldNameCapitalized _%>' | translate }}:</ion-label>
                <ion-datetime displayFormat="MM/DD/YYYY" formControlName="<%= fieldName %>" id="field_<%= fieldName %>"></ion-datetime>
                <%_ } else if (fieldType === 'Boolean') { _%>
                <ion-label>{{ '<%=fieldNameCapitalized _%>' | translate }}:</ion-label>
                <ion-checkbox formControlName="<%= fieldName %>"></ion-checkbox>
                <%_ } else if (fieldTypeBlobContent === 'text') { _%>
                <ion-textarea placeholder="{{ '<%=fieldNameCapitalized _%> ' | translate }}" formControlName="<%= fieldName %>" id="field_<%= fieldName %>"></ion-textarea>
                <%_ } else { _%>
                <ion-label position="floating">{{ '<%=fieldNameCapitalized _%>' | translate }}:</ion-label>
                <ion-input type="<%= fieldInputType %>" name="<%= fieldName %>" formControlName="<%= fieldName %>"></ion-input>
                <%_ } _%>
            </ion-item>
        <%_ }_%>   
         <%_ if ( (idx % 5) === 0  && idx > 0) { _%>
         </ion-col>

         <ion-col size="12" size-xs='12' size-sm='10' size-md='6' size-lg='6' size-xl='6'>
        <%_ }_%>
    <%_ } _%>
            <%_ for (idx in relationships) {
            const relationshipType = relationships[idx].relationshipType;
            const ownerSide = relationships[idx].ownerSide;
            const otherEntityName = relationships[idx].otherEntityName;
            const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
            const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
            const relationshipName = relationships[idx].relationshipName;
            const relationshipNameHumanized = relationships[idx].relationshipNameHumanized;
            const relationshipFieldName = relationships[idx].relationshipFieldName;
            const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
            const otherEntityField = relationships[idx].otherEntityField;
            const relationshipRequired = relationships[idx].relationshipRequired; _%>
            <ion-item lines='none'>
                <ion-label>{{ '<%= relationshipNameHumanized %>' | translate}} </ion-label>
                <ionic-selectable formControlName=<%_ if ( relationshipType === 'many-to-many') { _%> '<%=relationshipFieldNamePlural _%>'
                <%_ } else { _%>  '<%=relationshipFieldName _%>' <%_ } _%> 
                [items]='<%= otherEntityNamePlural %>' itemValueField="id"
                itemTextField="name" [isMultiple]='<%= relationshipType === 'many-to-many' %>' [canSearch]="true" <%_ if (relationshipRequired) { _%> required<%_ } _%>>
                </ionic-selectable>
            </ion-item>
            <%_ } _%>
        </ion-col>
      </ion-row>
    </ion-grid>
    </form>

    <br><br>
    <div text-center *ngIf="<%=entityInstance %>?.lastModifiedDate">
        {{ 'LastModifiedBy' | translate }}: {{<%=entityInstance %>?.lastModifiedBy}} on {{<%=entityInstance %>?.lastModifiedDate | date:'medium'}}
    </div>  
    <br><br>
    <div text-center class='hidden-xs-down'>
        <ion-button [disabled]="!isReadyToSave" size='small' (click)="save()">
            <ion-icon slot='start' name="md-checkmark"></ion-icon>
            {{ 'SAVE' | translate }}
        </ion-button>&nbsp;
        <ion-button color='medium' size='small' (click)="previousState()">
            <ion-icon slot='start' name="md-close"></ion-icon>
            {{ 'CANCEL' | translate }}
        </ion-button>
        <br>
    </div>

    <div class='hidden-sm-up'>
        <p><br><br></p>
    </div>
    <ion-fab class='hidden-sm-up' vertical="bottom" horizontal="begin" slot="fixed">
        <ion-fab-button (click)="save()">
            {{ 'SAVE' | translate }}
        </ion-fab-button>
    </ion-fab>

    <ion-fab class='hidden-sm-up' vertical="bottom" horizontal="end" slot="fixed">
        <ion-fab-button color='medium' (click)="previousState()">
            {{ 'CANCEL' | translate }}
        </ion-fab-button>
    </ion-fab>

</ion-content>
